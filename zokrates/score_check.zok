// Phase 1 demo: prove privately that 0 <= score <= 100 using a 7-bit range check
// Public input: bound (must be 100)
def main(private field score, field bound) -> bool {
    // Constrain score to 7 bits (0..127)
    u8 s0 = if score % 2 == 1 then 1 else 0 fi
    field t1 = (score - s0) / 2
    u8 s1 = if t1 % 2 == 1 then 1 else 0 fi
    field t2 = (t1 - s1) / 2
    u8 s2 = if t2 % 2 == 1 then 1 else 0 fi
    field t3 = (t2 - s2) / 2
    u8 s3 = if t3 % 2 == 1 then 1 else 0 fi
    field t4 = (t3 - s3) / 2
    u8 s4 = if t4 % 2 == 1 then 1 else 0 fi
    field t5 = (t4 - s4) / 2
    u8 s5 = if t5 % 2 == 1 then 1 else 0 fi
    field t6 = if (t5 - s5) % 2 == 1 then 1 else 0 fi
    field t7 = (t5 - s5 - t6) / 2
    u8 s6 = if t6 % 2 == 1 then 1 else 0 fi

    field recon = s0 + 2*s1 + 4*s2 + 8*s3 + 16*s4 + 32*s5 + 64*s6
    assert(recon == score)

    // Enforce score <= bound by ensuring (score + 127 - bound) <= 127
    field slack = 127 - bound
    field lhs = score + slack

    // Constrain lhs to 7 bits too
    u8 b0 = if lhs % 2 == 1 then 1 else 0 fi
    field u1 = (lhs - b0) / 2
    u8 b1 = if u1 % 2 == 1 then 1 else 0 fi
    field u2 = (u1 - b1) / 2
    u8 b2 = if u2 % 2 == 1 then 1 else 0 fi
    field u3 = (u2 - b2) / 2
    u8 b3 = if u3 % 2 == 1 then 1 else 0 fi
    field u4 = (u3 - b3) / 2
    u8 b4 = if u4 % 2 == 1 then 1 else 0 fi
    field u5 = (u4 - b4) / 2
    u8 b5 = if u5 % 2 == 1 then 1 else 0 fi
    field u6 = if (u5 - b5) % 2 == 1 then 1 else 0 fi
    field u7 = (u5 - b5 - u6) / 2
    u8 b6 = if u6 % 2 == 1 then 1 else 0 fi

    field recon2 = b0 + 2*b1 + 4*b2 + 8*b3 + 16*b4 + 32*b5 + 64*b6
    assert(recon2 == lhs)

    return true
}
